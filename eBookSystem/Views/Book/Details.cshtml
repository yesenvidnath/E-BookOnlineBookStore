@model eBookSystem.Models.BookDetailsViewModel;

@{
    ViewData["Title"] = "Details";
}

<style>
    :root {
        --primary-color: #E8F3FF;
        --secondary-color: #B6D5F5;
        --accent-color: #4A90E2;
        --text-color: #2C3E50;
        --light-bg: #F8FBFF;
    }

    body {
        background-color: var(--light-bg);
        color: var(--text-color);
    }

    .product-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .product-image {
        width: 100%;
        height: 500px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(74, 144, 226, 0.1);
    }

    .product-details {
        padding: 2rem;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(74, 144, 226, 0.1);
    }

    .price {
        font-size: 2rem;
        color: var(--accent-color);
        margin: 1rem 0;
        font-weight: bold;
    }

    .btn-custom {
        background-color: var(--accent-color);
        border: none;
        padding: 0.8rem 2rem;
        margin-right: 1rem;
        transition: transform 0.3s;
        color: white;
    }

        .btn-custom:hover {
            transform: translateY(-2px);
            background-color: #357ABD;
            color: white;
        }

    .quantity-selector {
        background-color: var(--primary-color);
        border: 1px solid var(--secondary-color);
        color: var(--text-color);
        padding: 0.5rem;
        border-radius: 5px;
        width: 70px;
        text-align: center;
    }

    .rating {
        color: #FFD700;
        font-size: 1.2rem;
        margin: 1rem 0;
    }

    .reviews-section {
        margin-top: 3rem;
        padding: 2rem;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(74, 144, 226, 0.1);
    }

    .review-card {
        background: var(--primary-color);
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .book-specs {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin: 2rem 0;
    }

    .spec-item {
        background: var(--primary-color);
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }

    .related-books {
        margin-top: 3rem;
    }

    .related-book-card {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        transition: transform 0.3s;
        box-shadow: 0 4px 15px rgba(74, 144, 226, 0.1);
    }

        .related-book-card:hover {
            transform: translateY(-5px);
        }

        .related-book-card img {
            width: 150px;
            height: 200px;
            object-fit: cover;
            border-radius: 5px;
        }

    h1, h3, h6 {
        color: var(--text-color);
    }

    .text-muted {
        color: #6c757d !important;
    }

    .description {
        line-height: 1.6;
        color: var(--text-color);
    }

    .form-control {
        border: 1px solid #e0e0e0;
        padding: 0.8rem;
        margin-bottom: 1rem;
    }

        .form-control:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
        }

    .form-group {
        margin-bottom: 1.5rem;
    }

    label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #555;
    }

    .review-section {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-top: 2rem;
    }

    .form-control {
        border: 1px solid #e0e0e0;
        padding: 0.8rem;
        margin-bottom: 1rem;
    }

        .form-control:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.2);
        }

    .form-group {
        margin-bottom: 1.5rem;
    }

    label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #555;
    }

    .existing-reviews {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #e0e0e0;
    }

    .review-card {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .rating {
        color: #ffc107;
        font-size: 1.2rem;
    }

</style>

<div class="product-container">

    <div class="row">
        <!-- Book Image Section -->
        <div class="col-md-6">
            <div class="book-image position-relative">
                <img src="data:image/png;base64,@Convert.ToBase64String(Model.Book.CoverImage)" alt="@Model.Book.Title" class="product-image">
                @if (Model.Book.Quantity == 0)
                {
                    <div class="out-of-stock">Out of Stock</div>
                }
            </div>
        </div>

        <!-- Book Details Section -->
        <div class="col-md-6">
            <div class="product-details">
                <!-- Book Title -->
                <h1 class="book-title">@Model.Book.Title</h1>

                <!-- Author -->
                <p class="text-muted">by @Model.Book.Author</p>

                <!-- Rating -->
                <div class="rating-wrapper">
                    @for (double i = 1; i <= 5; i += 1)
                    {
                        var avgRating = Model.Book.AverageRating ?? 0;

                        if (i <= avgRating)
                        {
                            <ion-icon name="star" aria-hidden="true"></ion-icon>
                        }
                        else
                        {
                            <ion-icon name="star-outline" aria-hidden="true"></ion-icon>
                        }
                    }
                </div>

                <!-- Book Condition -->
                <p class="book-condition">Condition: @Model.Book.Condition</p>

                <!-- Book Price -->
                <p class="book-price">Rs. @Model.Book.Price</p>

                <!-- Book Description -->
                <p class="book-description">@Model.Book.Description</p>

                <!-- Quantity Selector -->
                @if (Model.Book.Quantity > 0)
                {
                    <div class="d-flex align-items-center mb-4">
                        <div class="quantity-selector me-3">
                            <button type="button" id="decrease-quantity" class="quantity-btn">-</button>
                            <span id="quantity">1</span>
                            <button type="button" id="increase-quantity" class="quantity-btn">+</button>
                        </div>

                        @if (User.Identity.IsAuthenticated)
                        {
                            <!-- Add to Cart and Buy Now Buttons -->
                            <button class="btn btn-primary me-2" onclick="document.getElementById('addToCartForm').submit()">Add to Cart</button>
                            <button class="btn btn-secondary" onclick="document.getElementById('buyNowForm').submit()">Buy Now</button>
                        }
                        else
                        {
                            <!-- Add to Cart and Buy Now Buttons -->
                            <button class="btn btn-primary me-2" onclick="" disabled>Add to Cart</button>
                            <button class="btn btn-secondary" onclick="" disabled>Buy Now</button>
                        }

                    </div>
                }
                else
                {
                    <p class="text-danger">Currently unavailable.</p>
                }

                    <!-- Forms for Add to Cart and Buy Now -->
                    <form id="buyNowForm" asp-controller="DirectOrder" asp-action="Checkout" method="get">
                        <input type="hidden" name="bookId" value="@Model.Book.Id" />
                        <input type="hidden" name="quantity" id="quantity-input-buy-now" value="1" />
                    </form>

                    <form id="addToCartForm" asp-controller="Cart" asp-action="AddToCart" method="post">
                        <input type="hidden" name="bookId" value="@Model.Book.Id" />
                        <input type="hidden" name="quantity" id="quantity-input" value="1" />
                    </form>
                
                

            </div>
        </div>
    </div>


    <div class="review-section">
        <!-- Write a Review Section -->
        <h3>Write a Review</h3>
        @if (User.Identity.IsAuthenticated)
        {
            <form method="post" action="/Book/AddOrUpdateReview" id="reviewForm">
                <!-- Book ID (Hidden) -->
                <input type="hidden" name="bookId" value="@Model.Book.Id" />

                <!-- Rating Input -->
                <div class="form-group">
                    <label for="rating">Rating:</label>
                    <input type="number" id="rating" name="rating"
                           class="form-control" min="1" max="5"
                           step="0.1" placeholder="Rate between 1 and 5" required />
                </div>

                <!-- Review Comment Input -->
                <div class="form-group">
                    <label for="comment">Review:</label>
                    <textarea id="comment" name="comment"
                              class="form-control" rows="3"
                              placeholder="Write your review here..." required></textarea>
                </div>

                <!-- Submit Button -->
                <button type="submit" class="btn btn-custom">Submit Review</button>
            </form>
        }
        else
        {
            <p>Please <a href="/Account/Login">log in</a> to submit a review.</p>
            <button type="button" class="btn btn-custom" disabled>Add Review</button>
        }

        <!-- Existing Reviews Section -->
        <div class="existing-reviews mt-5">
            <h3>Customer Reviews</h3>

            @if (Model.Reviews != null && Model.Reviews.Any())
            {
                @foreach (var review in Model.Reviews)
                {
                    <div class="review-card mb-4">
                        <!-- Rating Stars -->
                        <div class="rating">
                            @* Convert rating to double *@
                            @{
                                double rating = double.TryParse(review.Rating.ToString(), out var parsedRating) ? parsedRating : 0;
                            }

                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Math.Floor(rating)) // Full star
                                {
                                    <i class="bi bi-star-fill text-warning"></i>
                                }
                                else if (i == Math.Ceiling(rating) && rating % 1 != 0) // Half star
                                {
                                    <i class="bi bi-star-half text-warning"></i>
                                }
                                else // Empty star
                                {
                                    <i class="bi bi-star text-muted"></i>
                                }
                            }
                        </div>

                        <!-- Review Text -->
                        <p>"@review.ReviewText"</p>

                        <!-- User and Timestamp -->
                        <small class="text-muted">- @review.UserId, @review.Timestamp.ToString("g")</small>
                    </div>
                }
            }
            else
            {
                <p>No reviews yet.</p>
            }
        </div>
    </div>


    

</div>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityElement = document.getElementById('quantity');
            const quantityInput = document.getElementById('quantity-input');
            const increaseButton = document.getElementById('increase-quantity');
            const decreaseButton = document.getElementById('decrease-quantity');
            const isUserLoggedIn = document.getElementById('isUserLoggedIn').value;

            increaseButton.addEventListener('click', function () {
                let quantity = parseInt(quantityElement.innerText);
                if (quantity < @Model.Book.Quantity) {
                    quantity++;
                    quantityElement.innerText = quantity;
                    quantityInput.value = quantity;
                }
            });

            decreaseButton.addEventListener('click', function () {
                let quantity = parseInt(quantityElement.innerText);
                if (quantity > 1) {
                    quantity--;
                    quantityElement.innerText = quantity;
                    quantityInput.value = quantity;
                }
            });

            document.getElementById('buyNowButton').addEventListener('click', function (e) {
                if (isUserLoggedIn === ";") {
                    e.preventDefault();
                    alert('You need to be logged in to buy this item.');
                } else if (@Model.Book.Quantity == 0) {
                    e.preventDefault();
                    alert('This item is out of stock.');
                } else {
                    document.getElementById('buyNowForm').submit();
                }
            });

            document.getElementById('addToCartButton').addEventListener('click', function (e) {
                if (isUserLoggedIn === ";") {
                    e.preventDefault();
                    alert('You need to be logged in to add this item to your cart.');
                } else if (@Model.Book.Quantity == 0) {
                    e.preventDefault();
                    alert('This item is out of stock.');
                } else {
                    document.getElementById('addToCartForm').submit();
                }
            });
        });
    </script>
